{"pages":[],"posts":[{"title":"DataGrip连接Mysql错误之时区错误","text":"操作系统: win 10 Mysql 版本 : 8.0 错误描述 在DataGrip中连接Mysql时，发生如下错误: 原因:在使用Mysql的6.0.x以上的jar的时候，需要指定serverTimezone,否则就会出现异常。 解决方法 方法一：命令行登录MySql修改Mysql 时区 这种方法不推荐，因为当Mysql服务重启的时候，被修改的时区时间会被重置，下次连接Mysql时问 题依然会存在。 配置Mysql环境变量 编辑Path，加入Mysql的bin路径 命令行登录Mysql mysql -u root -p '你的密码' 查看并修改时区 show variables like ``'%time_zone%'; ​ Mysql默认SYSTEM是美国时间，比我国晚8个小时 ​ set global time_zone = ``'+8:00'``; ​ 修改后，重新用DataGrip重新连接，问题解决。 方法二: 修改database配置中的serverTimezone 设置serverTimezone 为UTC (世界协调时间) 再次连接 使用IDEA内置的数据库管理工具时，如果遇到时区问题，也可用这种方法解决","link":"/2019/05/16/DataGrip%E8%BF%9E%E6%8E%A5Mysql%E9%94%99%E8%AF%AF%E4%B9%8B%E6%97%B6%E5%8C%BA%E9%94%99%E8%AF%AF/"},{"title":"IDEA中lombok插件离线安装","text":"因为网络问题，安装lombok一直失败，所以这次采用插件包离线安装 下载插件包，插件包有两个地方可以下载，分别是IDEA的官方插件仓库和GitHub里lombok-intellij-plugin仓库 IDEA：http://plugins.jetbrains.com/plugin/6317-lombok-plugin Github：https://github.com/mplushnikov/lombok-intellij-plugin/releases 我这里采用Github仓库的 对照自己下载的IDEA版本下载指定的插件包 文件下载 不清楚自己IDEA的，可依次进入IDEA-----&gt; Help —&gt;About查看 安装插件包 依次进入IDEA —&gt; Settings -----&gt;Plugins 点击第三个选项，找到刚才下载的lombok插件包的位置进行安装，完成后重启IDEA 这样就安装完成了","link":"/2020/02/17/IDEA%E4%B8%ADlombok%E6%8F%92%E4%BB%B6%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85/"},{"title":"Intellij IDEA 安装","text":"操作系统: win10 1.IDEA介绍 IDEA全称IntelliJ IDEA（JetBrains公司旗下的产品），是Java编程语言开发的集成境。“Capable and Ergonomic IDE for JVM” 官网,适用于JVM的功能强大且符合人体工程学(Human Engineering)的IDE（Integrated Development Environment-集成开发环境） 2. 下载并安装 网址 : https://www.jetbrains.com/idea/ 进行安装 ​ 一直点击next完成安装 3.目录结构 bin:容器，执行文件和启动参数等 help：快捷键文档和其它帮助文档 jbr:??? lib:IDEA依赖的类库 license：各个插件许可 plugins: IDEA插件 redist:??? bin目录下： idea.properties :IDEA配置文件 idea64.exe.vmoptions ：64位idea vm配置文件 vm配置文件 -Xms128m : 设置初始的内存数，提高该值可以加快Java程序的启动速度（16内存好像可以尝试改为-Xms512m） -Xmx1010m :设置最大内存数，提高该值，可以减少内存Garage收集的频率，提高程序性能（16内存好像可以尝试改为-Xmx1500m） -XX:ReservedCodeCacheSize=240m ：保留代码占用的内存容量（16G 内存的机器可尝试设置为500m） 设置目录（C盘用户文件下） 这是IDEA保存各种配置的目录。 这个设置目录有一个特性，就是你删除掉整个目录之 后，重新启动 IntelliJ IDEA 会再自动帮你生成一个全新的默认配置，所以很多时候如果你把 IntelliJ IDEA 配置改乱了，只要删掉该目录，一切都会还原到默认。 有两个是因为我下过两个版本的IDEA，老版本的配置我没有删掉 config：该目录是IDEA 个性化化配置目录，或者说是整个 IDE 设置目录。安装新版本的 IntelliJ IDEA 时会自动扫描硬盘上的旧配置目录，被扫描的目录指的就是该目录。这个目录主要记录了IDEA 主要配置功能、自定义的代码模板、自定义的文件模板、自定义的快捷键、 Project 的 tasks 记录等个性化的设置。 system : 该目录是IDEA系统文件目录，是 IDEA 与开发项目一个桥梁目录，里面主要有：缓存、索引、容器文件输出等 4. 这里推荐一款IDEA编辑字体(jetbrains mono) 字体样例: 下载步骤 官方网址: https://www.jetbrains.com/lp/mono/ 点击 右上角下载 下载完成后，解压，进入ttf文件夹 逐一双击进行安装 字体样式安装完后，打开IDEA，依次进入file ----&gt;Settings —&gt;Editor ----&gt;Font 进行设置","link":"/2020/02/17/Intellij-IDEA-%E5%AE%89%E8%A3%85/"},{"title":"Mybatis框架学习二","text":"mysql ：8.0 入门案例 读取配置文件 创建SqlSessionFactory工厂 创建工厂mybatis使用了构建者模式（把对象的创建细节隐藏，让使用者直接调用方法即可拿到对象） 使用工厂生产SqlSession对象 生产SqlSession使用了工厂模式（解耦，即降低类之间的依赖关系） 使用SqlSession创建接口的代理对象 session.getMapper(Class type); 创建接口实现类使用了代理模式（不修改源码的基础上对已有方法增强） 使用代理对象执行方法 释放资源 注意事项：不要忘记在映射配置中告诉mybatis要把数据封装到哪个实体类中（设定resultType的值为全类名） 123456789101112131415161718192021222324252627282930313233/*mybatis 入门案例 */public class MybatisTest { public static void main(String[] args) { //1. 读取配置文件 try { InputStream in= Resources.getResourceAsStream(\"SqlMapConfig.xml\"); //2. 创建SqlSessionFactory工厂 SqlSessionFactoryBuilder builder=new SqlSessionFactoryBuilder(); SqlSessionFactory factory=builder.build(in); //3. 使用工厂生产SqlSession对象 SqlSession session=factory.openSession(); //4. 使用SqlSession创建接口的代理对象 UserRepository userRepository=session.getMapper(UserRepository.class); //5. 使用代理对象执行方法 List&lt;User&gt; users=userRepository.findall(); for(User user:users){ System.out.println(user); } //6. 释放资源 session.close(); in.close(); } catch (IOException e) { e.printStackTrace(); } }} 测试结果： 使用注解 在repository中的接口方法前加上指定注解 1234public interface UserRepository { @Select(\"select * from user\") List&lt;User&gt; findall();} 在sqlmapCongfig.xml中指定mapper 的class属性，指向注解的repository全限定类名 1234&lt;mappers&gt; &lt;!--使用注解来配置,使用class属性指向注解的repository全限定类名--&gt; &lt;mapper class=\"com.litao.repository.UserRepository\"/&gt;&lt;/mappers&gt; 查询操作代码大致分析 读取配置文件 解析xml ：dom4j selectList方法 根据配置文件的信息创建Connection对象（注册驱动，获取连接） 获取预处理对象PreparedStatement connection.preparedStatement(sql) 执行查询sql语句，返回ResultSet ResultSet resultSet =preparedStatement.executeQuery(); 遍历结构集 resultSet 用于封装 List list =new ArrayList(); while(resultSet.next(){ E element =(E) Class.forName(“全限定类名”).newInstance ()（对应xml中的resultType） 封装:把每个内容添加到element中，再把element加入到list中 根据反射的方式来根据名称获取属性并赋值 list.add(element); } 返回list return list； 执行上述方法需要提供两个信息： 连接信息（用来创建connection） 映射信息：sql语句和封装结果的实体类全限定名（resultType），把这两个信息组合起来定义成一个对象（Map） String Mapper（映射） com.litao.repository.UserRepository String ClassPath findall string sql 根据接口的字节码创建代理对象 public T getMapper(Class type){ /* 类加载器：它使用的和被代理的对象是相同的类加载器 代理对象要实现的接口：在被代理对象实现相同的接口 代理方式：它就是增强的方法，需要自己来提供。此处是InnvocationHandler的接口，需要写一个该接口的实现类，在实现类中调用selectList方法 */ Proxy.newProxyInstance（类加载器，代理对象要实现的接口字节码数组，代理方式） } 这个让我想到了Spring框架中的AOP（面向切面编程）中的代理方式","link":"/2019/05/19/Mybatis%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E4%BA%8C/"},{"title":"Mybatis框架学习一","text":"mysql : 8.0 一、概述 持久层技术解决方案： JDBC技术： Connection PreparedStatement ResultSet Spring的JdbcTemplate: Spring中对jdbc的封装 Apache的DButils： 与Spring的JdbcTemplate很像，也是对Jdbc的封装 以上这些都不是框架，JDBC是规范，Spring的JdbcTemplate和Apache的DButils都只是工具类 Mybatis框架概述： Mybatis是一个优秀的基于Java的持久层框架，它内部封装了jdbc，使开发者只需要关注sql语句本身，而不需要花费精力去处理加载驱动、创建链接、创建statement等过程。 mybatis可通过xml或注解的方式将要执行的statement语句配置起来，并通过java对象和statement中sql的动态参数进行映射生成最终执行的sql语句，最后由mybatis框架执行sql并将结果映射为java对象并返回。 采用ORM思想解决了实体和数据库映射的问题，对jdbc进行了封装，屏蔽了jdbc api底层访问细节，是我们不用与Jdbc api打交道，就可以完成对数据库的持久化操作。 二、创建Mysql用户测试表 12345678create table user( id int(10) not null auto_increment, username varchar(30) not null comment '用户名称', birthday datetime default null comment '生日', sex char(1) default null comment '性别', address varchar(100) default null comment '地址', primary key (id))ENGINE =InnoDB DEFAULT CHARSET =utf8; 插入数据 三、环境配置 导入依赖 12345678910&lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis&lt;/artifactId&gt; &lt;version&gt;3.4.6&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;8.0.15&lt;/version&gt;&lt;/dependency&gt; 创建实体类的接口 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879import java.io.Serializable;import java.util.Date;public class User implements Serializable { private static final long serialVersionUID=1L; private Integer id; private String username; private Date birthday; private String sex; private String address; public static long getSerialVersionUID() { return serialVersionUID; } public Integer getId() { return id; } public void setId(Integer id) { this.id = id; } public String getUsername() { return username; } public void setUsername(String username) { this.username = username; } public Date getBirthday() { return birthday; } public void setBirthday(Date birthday) { this.birthday = birthday; } public String getSex() { return sex; } public void setSex(String sex) { this.sex = sex; } public String getAddress() { return address; } public void setAddress(String address) { this.address = address; } public User(Integer id, String username, Date birthday, String sex, String address) { this.id = id; this.username = username; this.birthday = birthday; this.sex = sex; this.address = address; } public User() { } @Override public String toString() { return \"User{\" + \"id=\" + id + \", username='\" + username + '\\'' + \", birthday=\" + birthday + \", sex='\" + sex + '\\'' + \", address='\" + address + '\\'' + '}'; }} 在resource文件下创建Mybatis的主配置文件 12345678910111213141516171819202122232425262728&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;&lt;!DOCTYPE configuration PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-config.dtd\"&gt;&lt;!--mybatis主配置文件--&gt;&lt;configuration&gt; &lt;!--配置环境--&gt; &lt;environments default=\"mysql\"&gt; &lt;!--配置mysql的环境--&gt; &lt;environment id=\"mysql\"&gt; &lt;!--配置事务的类型--&gt; &lt;transactionManager type=\"JDBC\"&gt;&lt;/transactionManager&gt; &lt;!--配置连接池--&gt; &lt;dataSource type=\"POOLED\"&gt; &lt;!--配置连接数据库的基本信息--&gt; &lt;property name=\"driver\" value=\"com.mysql.cj.jdbc.Driver\"/&gt; &lt;property name=\"url\" value=\"jdbc:mysql://localhost:3306/test_mybatis?useUnicode=true&amp;amp;character=UTF-8&amp;amp;serverTimezone=UTC\"/&gt; &lt;property name=\"username\" value=\"root\"/&gt; &lt;property name=\"password\" value=\"li980616\"/&gt; &lt;/dataSource&gt; &lt;/environment&gt; &lt;/environments&gt; &lt;!--指定映射配置文件的位置--&gt; &lt;mappers&gt; &lt;mapper resource=\"com/litao/repository/UserRepository.xml\"/&gt; &lt;/mappers&gt;&lt;/configuration&gt; 在resource下创建映射配置文件 12345678910&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;&lt;mapper namespace=\"com.litao.repository.UserRepository\"&gt; &lt;!--查询所有--&gt; &lt;select id=\"findall\" resultType=\"com.litao.entity.User\"&gt; select * from user &lt;/select&gt;&lt;/mapper&gt; 注意事项 在Mybatis中把持久层的操作接口和映射文件也叫做 Mapper，所以UserRespository和UserMapper是一样的 namespace 的值必须是接口的全限定类名 操作配置中（select、update、insert等）的id属性名要和接口中的方法名一致 上述操作和注意事项完成后，开发中无需再写接口的实现类","link":"/2019/05/19/Mybatis%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E4%B8%80/"},{"title":"跳转测试","text":"[toc] ##第一章 内容 ##第二章 内容 ##参考文献 内容 跳转到这里 test Connection PreparedStament ResultSet Connection PreparedStament ResultSet Connection PreparedStament ResultSet ConnectionPreparedStamentResultSet ConnectionPreparedStamentResultSet ConnectionPreparedStamentResultSet ConnectionPreparedStamentResultSet ConnectionPreparedStamentResultSet ConnectionPreparedStamentResultSet ConnectionPreparedStamentResultSet ConnectionPreparedStamentResultSet ConnectionPreparedStamentResultSet ConnectionPreparedStamentResultSet ConnectionPreparedStamentResultSet ConnectionPreparedStamentResultSet ConnectionPreparedStamentResultSet ConnectionPreparedStamentResultSet ConnectionPreparedStamentResultSet ConnectionPreparedStamentResultSet ConnectionPreparedStamentResultSet ConnectionPreparedStamentResultSet ConnectionPreparedStamentResultSet ConnectionPreparedStamentResultSet ConnectionPreparedStamentResultSet ConnectionPreparedStamentResultSet ConnectionPreparedStamentResultSet ConnectionPreparedStamentResultSet ConnectionPreparedStamentResultSet ConnectionPreparedStamentResultSet ConnectionPreparedStamentResultSet ConnectionPreparedStamentResultSet ConnectionPreparedStamentResultSet ConnectionPreparedStamentResultSet test 页内跳转 文件跳转 网站跳转","link":"/2020/02/19/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"},{"title":"Tomcat配置","text":"","link":"/2020/02/19/Tomcat%E9%85%8D%E7%BD%AE/"}],"tags":[{"name":"Mysql","slug":"Mysql","link":"/tags/Mysql/"},{"name":"IDEA","slug":"IDEA","link":"/tags/IDEA/"},{"name":"Mybatis","slug":"Mybatis","link":"/tags/Mybatis/"}],"categories":[]}